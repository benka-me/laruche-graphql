
input Auth {
    Token: String!
}
type LoginRes{
    Status: Boolean!
    TokenErr: String!
}

input RegisterReq{
    email: String!
    username: String!
    password: String!
    password2: String!
}

type RegisterRes{
    Status: Boolean!
    StatusMessage: String!
}

type Mutation{
    register(input: RegisterReq!): RegisterRes!
}

type Framework {
    Author: String!
    Name: String!
}

type Rpc {
    Name: String!
    Input: String!
    Output: String!
    Line: String!
}

input BeeReq {
    Author: String!
    Name: String!
    Auth: Auth!
}

type Bee {
    Author: String!
    Name: String!
    PkgName: String!
    Description: String!
    Repo: String!
    Port: Int!
    License: String!
    Keywords: [String!]!
    DevLang: Int!
    Framework: Framework
    Rpcs: [Rpc!]!
}

type BeeDetails {
    Readme: String!
}
type FullBee {
    Bee: Bee!
    Details: BeeDetails!
}

type Hive {
    Author: String!
    Name: String!
    Repo: String!
}

input HomeReq {
    Token: String!
}

type Home {
    Bees: [Bee!]!
    Hives: [Hive!]!
}

type Query{
    Login(username: String!, password: String!): LoginRes!
    GetHome(input: HomeReq!): Home!
    GetBee(input: BeeReq!): Bee!
    GetBeeDetails(input: BeeReq!): BeeDetails!
    GetFullBee(input: BeeReq!): FullBee!
}

schema{
    query: Query,
    mutation: Mutation
}

